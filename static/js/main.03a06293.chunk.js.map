{"version":3,"sources":["redux/actions.js","redux/phonebook-operations.js","redux/phonebook-selectors.js","components/Contacts.js","components/Phonebook.js","components/HomeView.js","redux/auth/auth-actions.js","redux/auth/auth-operations.js","components/RegisterView.js","components/LoginView.js","redux/auth/auth-selectors.js","components/Navigation.js","defaultImg/defaultAvatar.png","components/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","components/App.js","redux/auth/auth-reducer.js","redux/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","actions","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","operations","addContact","contact","dispatch","axios","post","then","data","catch","error","message","deleteContact","contactId","delete","fetchContacts","get","filterContacts","getContacts","state","contacts","getVisibleContacts","createSelector","filter","items","normalizedFilter","toLowerCase","name","includes","connect","contactID","className","map","id","number","type","onClick","Phonebook","handleInputName","e","setState","target","value","handleInputContact","this","props","pattern","title","required","onChange","shortid","generate","handleFilter","Component","filteredContact","HomeView","authActions","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","defaults","baseURL","token","headers","common","Authorization","authOperations","register","credentials","a","response","logIn","logOut","getCurrentUser","getState","persistedToken","authReducer","RegisterView","email","password","handleChange","handleSubmit","preventDefault","onRegister","onSubmit","autoComplete","mapDispatchToProps","LoginView","onLogin","authSelectors","getIsAuthenticated","isAuthenticated","getUserName","user","to","exact","onLogout","avatar","defaultAvatar","src","alt","width","height","AuthNav","isAunthenticated","component","redirectTo","routeProps","render","restricted","App","onGetCurrentUser","path","initialUserState","createReducer","_","payload","setError","combineReducers","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","persistReducer","devTools","process","persistorAndStore","persistor","persistStore","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.03a06293.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactRequest = createAction('phonebook/FetchContactRequest');\r\nconst fetchContactSuccess = createAction('phonebook/FetchContactSuccess');\r\nconst fetchContactError = createAction('phonebook/FetchContactError');\r\n\r\nconst addContactRequest = createAction('phonebook/AddContactRequest');\r\nconst addContactSuccess = createAction('phonebook/AddContactSuccess');\r\nconst addContactError = createAction('phonebook/AddContactError');\r\n\r\nconst deleteContactRequest = createAction('phonebook/DeleteContactRequest');\r\nconst deleteContactSuccess = createAction('phonebook/DeleteContactSuccess');\r\nconst deleteContactError = createAction('phonebook/DeleteContactError');\r\n\r\nconst changeFilter = createAction('phonebook/FilteredContact');\r\n\r\nexport const actions = {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  changeFilter,\r\n};\r\n","import axios from 'axios';\r\nimport { actions } from './actions';\r\n\r\nconst fetchContacts = () => (dispatch) => {\r\n  dispatch(actions.fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.fetchContactError(error.message)));\r\n};\r\n\r\nconst addContact = (contact) => (dispatch) => {\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(actions.deleteContactError(error.message)));\r\n};\r\n\r\nconst filterContacts = (contact) => (dispatch) => {\r\n  dispatch(actions.changeFilter());\r\n};\r\n\r\nexport const operations = {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n  filterContacts,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = (state) => state.contacts;\r\n\r\nconst getFilter = (state) => state.filter;\r\n\r\nconst getItems = (state) => state.contacts.items;\r\n\r\nconst getVisibleContacts = createSelector([getFilter, getItems], (filter, items) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  if (items) {\r\n    return items.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\r\n  }\r\n});\r\n\r\nexport { getContacts, getVisibleContacts };\r\n","import { React } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { operations } from '../redux/phonebook-operations';\r\nimport { getVisibleContacts } from '../redux/phonebook-selectors';\r\n\r\nconst Contacts = ({ contacts, deleteContact }) => (\r\n  <ul className=\"nameList\">\r\n    {contacts &&\r\n      contacts.map(({ id, name, number }) => (\r\n        <li key={id} className=\"item\">\r\n          <p className=\"name\">\r\n            {name}: {number}\r\n          </p>\r\n          <button type=\"button\" onClick={() => deleteContact(id)}>\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (contactID) => dispatch(operations.deleteContact(contactID)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import { Component } from 'react';\r\nimport Contacts from './Contacts';\r\nimport shortid from 'shortid';\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../redux/actions';\r\nimport { operations } from '../redux/phonebook-operations';\r\nimport { getContacts } from '../redux/phonebook-selectors';\r\n\r\nclass Phonebook extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  handleInputName = (e) => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n  handleInputContact = (e) => {\r\n    this.setState({ number: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className=\"form\">\r\n          <label className=\"nameLabel\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleInputName}\r\n            className=\"nameInput\"\r\n          />\r\n          <label className=\"numberLabel\">Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleInputContact}\r\n            className=\"numberInput\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            onClick={() =>\r\n              this.props.addContact({\r\n                name: this.state.name,\r\n                id: shortid.generate(),\r\n                number: this.state.number,\r\n              })\r\n            }\r\n          >\r\n            Add contact\r\n          </button>\r\n        </form>\r\n        <h2>Contacts: </h2>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.props.handleFilter}\r\n          className=\"nameFilter\"\r\n        />\r\n        {this.props.contacts && <Contacts contacts={this.props.contacts} />}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchContacts: () => dispatch(operations.fetchContacts()),\r\n  addContact: (contact) => dispatch(operations.addContact(contact)),\r\n  filterContacts: (contacts) => dispatch(operations.filteredContact(contacts)),\r\n  handleFilter: (e) => dispatch(actions.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Phonebook);\r\n","const HomeView = () => (\r\n  <div>\r\n    <h1>Домашняя страница</h1>\r\n  </div>\r\n);\r\n\r\nexport default HomeView;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nconst authActions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n\r\nexport default authActions;\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = (credentials) => async (dispatch) => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async (dispatch) => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const persistedToken = getState().authReducer.token;\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nconst authOperations = {\r\n  register,\r\n  logIn,\r\n  logOut,\r\n  getCurrentUser,\r\n};\r\n\r\nexport default authOperations;\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nclass RegisterView extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onRegister(this.state);\r\n\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, email, password } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Страница регистрации</h1>\r\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n          <label>\r\n            Имя\r\n            <input type=\"text\" name=\"name\" value={name} onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Почта\r\n            <input type=\"email\" name=\"email\" value={email} onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Пароль\r\n            <input type=\"password\" name=\"password\" value={password} onChange={this.handleChange} />\r\n          </label>\r\n          <button type=\"submit\">Зарегистрироваться</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onRegister: authOperations.register,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RegisterView);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nclass LoginView extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onLogin(this.state);\r\n\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { email, password } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Страница логин</h1>\r\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n          <label>\r\n            Почта\r\n            <input type=\"email\" name=\"email\" value={email} onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Пароль\r\n            <input type=\"password\" name=\"password\" value={password} onChange={this.handleChange} />\r\n          </label>\r\n          <button type=\"submit\">Войти</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onLogin: authOperations.logIn,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(LoginView);\r\n","const getIsAuthenticated = (state) => state.authReducer.isAuthenticated;\r\n\r\nconst getUserName = (state) => state.authReducer.user.name;\r\n\r\nconst authSelectors = { getIsAuthenticated, getUserName };\r\n\r\nexport default authSelectors;\r\n","import { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst Navigation = ({ isAuthenticated }) => (\r\n  <div>\r\n    <NavLink className=\"navLink\" to=\"/\" exact>\r\n      Главная\r\n    </NavLink>\r\n    {isAuthenticated && (\r\n      <NavLink className=\"navLink\" to=\"/contacts\" exact>\r\n        Книга контактов\r\n      </NavLink>\r\n    )}\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);\r\n","export default __webpack_public_path__ + \"static/media/defaultAvatar.0c07a2e4.png\";","import { connect } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\nimport defaultAvatar from '../defaultImg/defaultAvatar.png';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div className=\"userMenuContainer\">\r\n    <img className=\"userMenuAvatar\" src={avatar} alt=\"\" width=\"32\" height=\"32\" />\r\n    <span className=\"userMenuName\">Welcome, {name}</span>\r\n    <button className=\"btnLogout\" type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  name: authSelectors.getUserName(state),\r\n  avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import { NavLink } from 'react-router-dom';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink className=\"navLink\" to=\"/register\" exact>\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink className=\"navLink\" to=\"/login\" exact>\r\n      Вход\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","import Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport { connect } from 'react-redux';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst AppBar = ({ isAunthenticated }) => (\r\n  <div className=\"navContainer\">\r\n    <Navigation />\r\n    {isAunthenticated ? <UserMenu /> : <AuthNav />}\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAunthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);\r\n","import { connect } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst PrivateRoute = ({ component: Component, isAuthenticated, redirectTo, ...routeProps }) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={(props) => (isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />)}\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import { connect } from 'react-redux';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport authSelectors from '../redux/auth/auth-selectors';\r\n\r\nconst PublicRoute = ({ component: Component, isAuthenticated, redirectTo, ...routeProps }) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={(props) =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import '../style/App.css';\nimport Phonebook from './Phonebook';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeView from './HomeView';\nimport RegisterView from './RegisterView';\nimport LoginView from './LoginView';\nimport AppBar from './AppBar';\nimport { Component } from 'react';\nimport authOperations from '../redux/auth/auth-operations';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar />\n        <Switch>\n          <Route exact path=\"/\" component={HomeView} />\n          <PublicRoute\n            path=\"/register\"\n            restricted\n            component={RegisterView}\n            redirectTo=\"/contacts\"\n          />\n          <PublicRoute path=\"/login\" restricted component={LoginView} redirectTo=\"/contacts\" />\n          {/* <Route path=\"/login\" component={LoginView} /> */}\n          <PrivateRoute path=\"/contacts\" component={Phonebook} redirectTo=\"login\" />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.logoutSuccess]: () => false,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  error,\r\n  isAuthenticated,\r\n});\r\n","import { configureStore, getDefaultMiddleware, createReducer } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { actions } from './actions';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport authReducer from './auth/auth-reducer';\r\n\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contacts = [];\r\n\r\nconst reducer = createReducer(contacts, {\r\n  [actions.fetchContactSuccess]: (_, { payload }) => {\r\n    return { items: payload };\r\n  },\r\n  [actions.addContactSuccess]: ({ items }, { payload }) => {\r\n    return { items: [...items, payload] };\r\n  },\r\n  [actions.deleteContactSuccess]: ({ items }, { payload }) => {\r\n    return { items: [...items.filter((contact) => contact.id !== payload)] };\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    authReducer: persistReducer(authPersistConfig, authReducer),\r\n    contacts: reducer,\r\n    filter,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst persistorAndStore = { store, persistor };\r\n\r\nexport default persistorAndStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport persistorAndStore from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <Provider store={persistorAndStore.store}>\n    <PersistGate loading={null} persistor={persistorAndStore.persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}